#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "ts"
def component = "translation-service"
def branchesToSync = ['demo', 'ithc', 'perftest']

GradleBuilder builder = new GradleBuilder(this, product)

def secrets = [
  'rpx-${env}': [
    secret('mc-idam-client-secret', 'BEFTA_OAUTH2_CLIENT_SECRET_OF_XUIWEBAPP')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
    secret('ts-service-translation-users-pwd', 'TS_SERVICE_TRANSLATION_USERS_PWD'),
    secret('ccd-befta-caseworker-2-solicitor-2-pwd', 'CCD_BEFTA_CASEWORKER_2_SOLICITOR_2_PWD'),
  ],
  's2s-${env}': [
    secret('microservicekey-xui-webapp', 'BEFTA_S2S_CLIENT_SECRET'),
    secret('microservicekey-xui-webapp', 'BEFTA_S2S_CLIENT_SECRET_OF_XUI_WEBAPP'),
    secret('microservicekey-ccd-definition', 'BEFTA_S2S_CLIENT_SECRET_OF_CCD_DEFINITION'),
    secret('microservicekey-ccd-data', 'BEFTA_S2S_CLIENT_SECRET_OF_CCD_DATA')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

// Other env variables needed for BEFTA.
env.S2S_URL_BASE = "http://rpe-service-auth-provider-aat.aat.platform.hmcts.net"
env.IDAM_API_URL_BASE = "https://idam-api.aat.platform.hmcts.net"
env.BEFTA_S2S_CLIENT_ID = "xui_webapp"
env.CCD_API_GATEWAY_OAUTH2_REDIRECT_URL = "https://www-ccd.aat.platform.hmcts.net/oauth2redirect"
env.BEFTA_S2S_CLIENT_ID_OF_XUI_WEBAPP = "xui_webapp"
env.BEFTA_S2S_CLIENT_ID_OF_CCD_DEFINITION = "ccd_definition"
env.BEFTA_S2S_CLIENT_ID_OF_CCD_DATA = "ccd_data"
env.BEFTA_OAUTH2_CLIENT_ID_OF_XUIWEBAPP = "xuiwebapp"
env.BEFTA_OAUTH2_REDIRECT_URI_OF_XUIWEBAPP = "https://www-ccd.aat.platform.hmcts.net/oauth2redirect"
env.BEFTA_OAUTH2_ACCESS_TOKEN_TYPE_OF_XUIWEBAPP = "OIDC"
env.BEFTA_OAUTH2_SCOPE_VARIABLES_OF_XUIWEBAPP = "profile openid roles manage-user create-user search-user"
env.CCD_API_GATEWAY_OAUTH2_CLIENT_ID = "ccd_gateway"

// temporary workaround for platform changes: turn BEFTA header checks to warning mode
env.BEFTA_RESPONSE_HEADER_CHECK_POLICY="JUST_WARN"

def vaultOverrides = [
  'preview' : 'aat'
]

withPipeline(type, product, component) {
  afterAlways('test') {
    builder.gradle('integration')

    // hmcts/cnp-jenkins-library may fail to copy artifacts after checkstyle error so repeat command (see /src/uk/gov/hmcts/contino/GradleBuilder.groovy)
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/checkstyle/*.html'

  }

  // Check if the build should be wired to an environment higher than 'preview'.
  if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'demo' || env.BRANCH_NAME == 'perftest' || env.BRANCH_NAME == 'ithc') {
    environmentOfDependencies = env.BRANCH_NAME
    // use aat environment for dependencies of master and CI/CD builds.
    if (env.BRANCH_NAME.startsWith("PR") || env.BRANCH_NAME == 'master') {
      environmentOfDependencies = "aat"
    }
  }

  syncBranchesWithMaster(branchesToSync)
  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)

  enableAksStagingDeployment()
  disableLegacyDeployment()

  afterAlways('smoketest:preview') {
    copyIgnore('./build/reports/tests/befta/smoke/cucumber-html-reports', './BEFTA Report for Smoke Tests/')
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Smoke Tests/**/*'
  }

  afterAlways('smoketest:aat') {
    copyIgnore('./build/reports/tests/befta/smoke/cucumber-html-reports', './BEFTA Report for Smoke Tests/')
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Smoke Tests/**/*'
  }

  afterAlways('functionalTest:preview') {
    copyIgnore('./build/reports/tests/befta/functional/cucumber-html-reports', './BEFTA Report for Functional Tests/')
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
  }

  afterAlways('functionalTest:aat') {
    copyIgnore('./build/reports/tests/befta/functional/cucumber-html-reports', './BEFTA Report for Functional Tests/')
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
  }
}

/**
 * Forces a recursive copy by always returning 0 regardless of errors
 */
def copyIgnore(filePath, destinationDir) {
  steps.sh("cp -R '${filePath}' '${destinationDir}' || :")
}
