plugins {
  id 'application'
  id 'idea'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.5'
  id 'org.springframework.boot' version '3.0.12'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.sonarqube' version '5.0.0.4638'
  id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.23'
  id 'com.github.hmcts.rse-cft-lib' version '0.19.1260'
  id 'uk.gov.hmcts.java' version '0.12.63'
  id 'io.freefair.lombok' version '8.6'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

ext {
  set('springCloudVersion', '2022.0.5')
}

ext['spring-security.version'] = '6.0.8'
ext['spring-framework.version'] = '6.0.21'
ext['snakeyaml.version'] = '2.2'
ext['jackson.version'] = '2.16.0'

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  cftlibRuntimeClasspath.extendsFrom(runtimeClasspath)
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

def versions = [
  testcontainers  : '1.15.3',
  junit           : '5.8.2',
  junitPlatform   : '1.7.2',
  serviceAuthVersion: '5.1.2',
  idamClientVersion : '3.0.3',
  appInsightsVersion: '2.4.1'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
}

idea {
  module {
    // config to allow Intellij to mark test source and resource files correctly to help linting tools
    testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
    testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
    testResourceDirs += project.sourceSets.functionalTest.resources.srcDirs
    testResourceDirs += project.sourceSets.integrationTest.resources.srcDirs
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

checkstyle {
  toolVersion '10.3.1'
}

tasks.withType(Checkstyle) {
  exclude '**/package-info.java'
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  generateCucumberReports.enabled = false
  failFast = true
}

task smoke(type: JavaExec) {
  description = "Runs smoke tests"
  group = "Verification"

  generateCucumberReports.enabled = false
  main = "uk.gov.hmcts.reform.translate.TranslationServiceBeftaMain"
  classpath += sourceSets.functionalTest.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
  args = [
    '--strict',
    '--threads', '10',
    '--plugin', "json:${rootDir}/target/cucumber.json",
    '--plugin', "junit:${buildDir}/test-results/smoke/cucumber.xml",
    '--tags', '@Smoke and not @Ignore',
    '--glue', 'uk.gov.hmcts.befta.player', 'src/functionalTest/resources/features'
  ]
  // '--add-opens=...' added to suppress 'WARNING: An illegal reflective access operation has occurred' in uk.gov.hmcts.befta.util.CucumberStepAnnotationUtils
  jvmArgs = [ '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED' ]

  finalizedBy {
    generateCucumberReports.enabled = true
    generateCucumberReports {
      doLast{
        delete "${rootDir}/BEFTA Report for Smoke Tests/"
        new File("${rootDir}/BEFTA Report for Smoke Tests").mkdirs()
        file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file("${rootDir}/BEFTA Report for Smoke Tests"))

        logger.quiet("Smoke test report moved to ---> file://${rootDir}/BEFTA%20Report%20for%20Smoke%20Tests/overview-features.html")
      }
    }
  }

  outputs.upToDateWhen { false }
}

task functional(type: JavaExec) {
  description = "Runs functional tests"
  group = "Verification"

  generateCucumberReports.enabled = false
  main = "uk.gov.hmcts.reform.translate.TranslationServiceBeftaMain"
  classpath += sourceSets.functionalTest.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
  args = [
    '--strict',
    '--threads', '10',
    '--plugin', "json:${rootDir}/target/cucumber.json",
    '--plugin', "junit:${buildDir}/test-results/functional/cucumber.xml",
    '--tags', 'not @Ignore',
    '--glue', 'uk.gov.hmcts.befta.player', 'src/functionalTest/resources/features'
  ]
  // '--add-opens=...' added to suppress 'WARNING: An illegal reflective access operation has occurred' in uk.gov.hmcts.befta.util.CucumberStepAnnotationUtils
  jvmArgs = [ '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED' ]

  finalizedBy {
    generateCucumberReports.enabled = true
    generateCucumberReports {
      doLast{
        delete "${rootDir}/BEFTA Report for Functional Tests/"
        new File("${rootDir}/BEFTA Report for Functional Tests").mkdirs()
        file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file("${rootDir}/BEFTA Report for Functional Tests"))
        logger.quiet("Functional test report moved to ---> file://${rootDir}/BEFTA%20Report%20for%20Functional%20Tests/overview-features.html")
      }
    }
  }

  outputs.upToDateWhen { false }
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

cucumberReports {
  outputDir = file("${rootDir}/target/cucumber")
  reports = files("${rootDir}/target/cucumber.json")
}

task customCleanBeftaReports(type:Delete) {
  delete "${rootDir}/BEFTA Report for Smoke Tests/"
  delete "${rootDir}/BEFTA Report for Functional Tests/"
  delete "${rootDir}/target/cucumber"
  delete "${rootDir}/target/cucumber.json"
}
tasks.clean.dependsOn(tasks.customCleanBeftaReports)

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

dependencies {

  // SPRING
  implementation group: 'org.springframework.boot', name: 'spring-boot'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-config-server'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-config'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-config-client'
  implementation group: 'org.springframework.security', name: 'spring-security-web'
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-jose'
  implementation group: 'org.springframework.security', name: 'spring-security-config'
  implementation group: 'org.springframework.security', name:'spring-security-rsa'
  implementation group: 'org.springframework.retry', name:'spring-retry'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.5.0'

  configurations.all {
    exclude group: 'com.vaadin.external.google', module: 'android-json'
  }

  // LOGGING
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.4'
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.6'
  implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.5.6'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j'
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-logging-logback', version: versions.appInsightsVersion
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-spring-boot-starter', version: versions.appInsightsVersion

  implementation group: 'org.flywaydb', name: 'flyway-core', version: '9.19.1'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.5.1'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.serviceAuthVersion
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: versions.idamClientVersion
  implementation group: 'com.auth0', name: 'java-jwt', version: '4.4.0'

  testImplementation(platform('org.junit:junit-bom:5.8.2'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: versions.junit
  testImplementation group: 'io.vavr', name: 'vavr', version: '0.10.4'
  testImplementation group: 'org.assertj', name: 'assertj-vavr', version: '0.4.2'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath
  integrationTestImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.testcontainers
  integrationTestImplementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.7.0'
  integrationTestImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', {
    exclude group: 'com.github.tomakehurst', module: 'wiremock-standalone'
  }
  integrationTestImplementation group: 'com.github.tomakehurst', name: 'wiremock-standalone', version: '2.19.0'
  integrationTestImplementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.6'
  integrationTestRuntimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.12.6'
  integrationTestRuntimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.12.6'
  integrationTestImplementation group: 'com.pivovarit', name: 'throwing-function', version: '1.5.1'

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath
  functionalTestImplementation libraries.junit5

  functionalTestImplementation group: 'commons-lang', name: 'commons-lang', version: '2.6'

  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
  implementation group: 'commons-io', name: 'commons-io', version: '2.16.1'

  testImplementation (group: 'com.github.hmcts', name: 'ccd-test-definitions', version: '7.17.0') {
    exclude group: 'io.rest-assured', module : 'rest-assured'
    exclude group: 'com.github.hmcts.befta-fw', module: 'befta-fw'
  }

  testImplementation group: 'com.github.hmcts', name: 'befta-fw', version: '8.7.11'

  cftlibImplementation group: 'org.springframework.boot', name: 'spring-boot-devtools'

  //constraints {
  //  implementation('org.springframework.cloud:3.1.7') {
  //    because('Versions < 3.1.7 an application is vulnerable to insertion of sensitive information into a log file when it attempts to revoke a Vault batch token - CVE-2023-20859')
  //  }
  //}
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: ts-translation-service"
    property "sonar.projectKey", "uk.gov.hmcts.reform:ts-translation-service"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation}"
    property "sonar.exclusions",
      "src/main/java/uk/gov/hmcts/reform/translate/Application.java," +
        "src/main/java/uk/gov/hmcts/reform/translate/config/SecurityConfiguration.java"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

apply from: './gradle/suppress.gradle'
// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.getRequired().set(true)
    csv.getRequired().set(false)
    xml.getOutputLocation().set(file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml"))
  }
}

mainClassName = 'uk.gov.hmcts.reform.translate.Application'

bootJar {
  archiveFileName = "ts-translation-service.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

bootWithCCD {

  authMode = uk.gov.hmcts.rse.AuthMode.Local

  environment("RSE_LIB_ADDITIONAL_DATABASES", "ts_translation_service");
  environment("TS_TRANSLATION_SERVICE_DB_USERNAME", "postgres")
  environment("TS_TRANSLATION_SERVICE_DB_PASSWORD", "postgres")
  environment("TS_TRANSLATION_SERVICE_DB_PORT", "6432")
  environment("TS_TRANSLATION_SERVICE_DB_NAME", "ts_translation_service")
  environment("RSE_LIB_S2S_PORT", 4502)
}
