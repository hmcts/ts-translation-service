server:
  port: 4650

management:
  endpoint:
    health:
      show-details: "always"
      cache:
        time-to-live: 10s
  endpoints:
    web:
      base-path: /
      exposure:
        include: health, info, prometheus
  health:
    probes:
      enabled: true

springdoc:
  packagesToScan: uk.gov.hmcts.reform.translate.controllers

spring:
  main:
    allow-bean-definition-overriding: true
  cache:
    cache-names: userInfoCache
    caffeine:
      spec: expireAfterWrite=1800s
  config:
    import: "optional:configtree:/mnt/secrets/ts/"
  application:
    name: Translation Service
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${TS_TRANSLATION_SERVICE_DB_HOST:localhost}:${TS_TRANSLATION_SERVICE_DB_PORT:5055}/${TS_TRANSLATION_SERVICE_DB_NAME:ts_translation_service}${TS_TRANSLATION_SERVICE_DB_OPTIONS:}
    username: ${TS_TRANSLATION_SERVICE_DB_USERNAME:ccd}
    password: ${TS_TRANSLATION_SERVICE_DB_PASSWORD:ccd}
    properties:
      charSet: UTF-8
    hikari:
      minimumIdle: 2
      maximumPoolSize: 10
      idleTimeout: 10000
      poolName: tsTranslationHikariCP
      maxLifetime: 7200000
      connectionTimeout: 30000
  jpa:
    properties:
      hibernate:
        jdbc:
          lob:
            # silence the 'wall-of-text' - unnecessary exception throw about blob types
            non_contextual_creation: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  flyway:
    out-of-order: true
    ignore-missing-migrations: true
  security:
    oauth2:
      client:
        provider:
          oidc:
            issuer-uri: ${IDAM_OIDC_URL:http://localhost:5000}/o
        registration:
          oidc:
            client-id: internal
            client-secret: internal
azure:
  application-insights:
    instrumentation-key: ${ts.AppInsightsInstrumentationKey:00000000-0000-0000-0000-000000000000}

idam:
  api:
    url: ${IDAM_API_URL:http://localhost:5000}
  s2s-auth:
    microservice: ts_translation_service
    totp_secret: ${IDAM_KEY_TS_TRANSLATION_SERVICE:AAAAAAAAAAAAAAAA}
    url: ${S2S_URL:http://localhost:4502}
  s2s-authorised:
    services: ${TS_TRANSLATION_SERVICE_S2S_AUTHORISED_SERVICES:xui_webapp,ccd_admin,ccd_definition}

oidc:
  issuer: ${OIDC_ISSUER:http://fr-am:8080/openam/oauth2/hmcts}

ts:
  endpoints:
    put-dictionary:
      s2s-authorised:
        bypass-role-authorise-check-for-services: ccd_definition
